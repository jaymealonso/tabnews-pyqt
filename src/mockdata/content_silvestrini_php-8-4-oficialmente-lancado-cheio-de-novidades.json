{"id": "179cee1d-4594-48d9-9b42-939fa1729e80", "owner_id": "1f215177-88e8-48c4-9883-c5d53c9e8216", "parent_id": null, "slug": "php-8-4-oficialmente-lancado-cheio-de-novidades", "title": "PHP 8.4 oficialmente lan\u00e7ado cheio de novidades", "body": "O PHP 8.4 acaba de ser lan\u00e7ado e tr\u00e1s, al\u00e9m de diversas melhorias da linguagem, novas features para facilitar a vida do desenvolvedor. Entre elas est\u00e3o: **Property Hooks**, **Asymmetric Property Visibility**, **Lazy Objects** e **Class Instantiation without extra parenthesis**.\n\n## Property Hooks\n\nInspirada em linguagens como C#, Kotlin e Swift, as property hooks permitem definir os m\u00e9todos getters e setters diretamente na declara\u00e7\u00e3o dos atributos, como no exemplo abaixo:\n\n```php\nclass User implements Named\n{\n    private bool $isModified = false;\n \n    public function __construct(\n        private string $first,\n        private string $last\n    ) {}\n \n    public string $fullName {\n        // Override the \"read\" action with arbitrary logic.\n        get => $this->first . \" \" . $this->last;\n \n        // Override the \"write\" action with arbitrary logic.\n        set {\n            [$this->first, $this->last] = explode(' ', $value, 2);\n            $this->isModified = true;\n        }\n    }\n}\n```\n\n\n## Asymmetric Property Visibility\n\n\nAgora \u00e9 poss\u00edvel definir separadamente a visibilidade do get e set das propriedades dos objetos\n\n```php\nclass Book\n{\n    public function __construct(\n        public private(set) string $title,\n        public protected(set) string $author,\n        protected private(set) int $pubYear,\n    ) {}\n}\n \nclass SpecialBook extends Book\n{\n    public function update(string $author, int $year): void\n    {\n        $this->author = $author; // OK\n        $this->pubYear = $year; // Fatal Error\n    }\n}\n \n$b = new Book('How to PHP', 'Peter H. Peterson', 2024);\n \necho $b->title; // How to PHP\necho $b->author; // Peter H. Peterson\necho $b->pubYear; // Fatal Error\n```\n\n\n## Lazy Objects\nAgora \u00e9 poss\u00edvel instanciar classes sem informar os par\u00e2metros obrigat\u00f3rios do construtor, sendo poss\u00edvel faz\u00ea-lo mais tarde. Isso permite que os frameworks utilizem ainda mais a inje\u00e7\u00e3o de depend\u00eancia, veja o exemplo abaixo:\n\n```php\nclass Example\n{\n    public function __construct(private int $data)\n    {\n    }\n\n    // ...\n}\n\n$initializer = static function (Example $ghost): void {\n    // Fetch data or dependencies\n    $data = ...;\n    // Initialize\n    $ghost->__construct($data);\n};\n```\n\n\n## Class Instantiation without extra parenthesis\nAntes do PHP 8.4, ao instaciar uma classe, era necess\u00e1rio embrulh\u00e1-la entre par\u00eanteses para poder acessar m\u00e9todos ou propriedades. Agora, n\u00e3o ser\u00e1 mais necess\u00e1rio, tornando o acesso mais simples.\n\n* Antes PHP 8.4\n```php\n// Wrapping parentheses are required to access class members\n$request = (new Request())->withMethod('GET')->withUri('/hello-world');\n```\n\n* Ap\u00f3s PHP 8.4\n```php\n// PHP Parse error (<= PHP 8.3): syntax error, unexpected token \"->\"\n$request = new Request()->withMethod('GET')->withUri('/hello-world');\n```\n\n## Fontes\n* Site oficial do PHP - https://www.php.net/manual/en/migration84.new-features.php#migration84.new-features.core.asymmetric-property-visibility\n* Laravel News - https://laravel-news.com/php-8-4-0", "status": "published", "type": "content", "source_url": "https://www.php.net/manual/en/migration84.new-features.php#migration84.new-features.core.asymmetric-property-visibility", "created_at": "2024-11-21T13:56:12.727Z", "updated_at": "2024-11-21T13:56:12.727Z", "published_at": "2024-11-21T13:56:12.731Z", "deleted_at": null, "owner_username": "silvestrini", "tabcoins": 10, "tabcoins_credit": 9, "tabcoins_debit": 0, "children_deep_count": 2}